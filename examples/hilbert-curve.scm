(define pairs
  '(((0 3) (1 0) (3 1) (2 0))
    ((2 1) (1 1) (3 0) (0 2))
    ((2 2) (3 3) (1 2) (0 1))
    ((0 0) (3 2) (1 3) (2 3))))

(define (rot n x y rx ry)
  (if (eq? ry 0)
    (if (eq? rx 1)
      (list (- (- n 1) y) (- (- n 1) x))
      (list y x))
    (list x y)))

(define (xy2d x y z)
  (let loop ((quad 0)
             (pair null)
             (i 0)
             (z (dec z)))
    (if (>= z 0)
      (let ((idx (js-eval "(" x " & (1 << " z ") ? 2 : 0 | (" y " & (1 << " z ") ? 1 : 0)"))
            (pair (get (get pairs quad) idx)))
        (loop (second pair)
              pair
              (js-eval "(" i " << 2) | " (first pair))
              (dec z)))
      i)))

(define (d2xy z t)
  (let ((n (js-eval "1 << " z)))
    (let loop ((x 0)
               (y 0)
               (s 1)
               (t t))
      (if (< s n)
        (let ((rx (js-eval "1 & " (/ t 2))))
          (let ((ry (js-eval "1 & (" t " ^ " rx ")")))
            (let ((xy (rot s x y rx ry)))
              (loop-recur (+ (first xy) (* s rx))
                    (+ (second xy) (* s ry))
                    (* s 2)
                    (/ t 4)))))
        (list x y)))))

(define (hilbertCurve level)
  (map (lambda (i) (d2xy level i))
       (range 0 (js-eval "1 << " (* level 2)))))
